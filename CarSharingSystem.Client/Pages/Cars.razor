@page "/cars"
@using CarSharingSystem.Client.Services
@inject HttpClient Http
@inject IJSRuntime js
@inject AuthService Auth

<h3>🚘 Dostępne samochody</h3>

@if (isLoading)
{
    <p>⏳ Ładowanie danych...</p>
}
else if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-warning mt-3">@message</div>
}
else if (cars != null && cars.Any())
{
    @foreach (var c in cars)
    {
        <div class="border p-3 m-2 rounded shadow-sm">
            <b>@c.Brand @c.Model</b> – <span>@c.PricePerDay zł/dzień</span>
            <button class="btn btn-success btn-sm ms-3" @onclick="() => Reserve(c.CarId)">Rezerwuj</button>
        </div>
    }
}
else
{
    <p>🚗 Brak dostępnych samochodów.</p>
}

@code {
    private List<Car>? cars;
    private string? message;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await Auth.GetTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            cars = await Http.GetFromJsonAsync<List<Car>>("cars/available");

            if (cars == null || cars.Count == 0 )
            {
                message = "Brak dostępnych samochodów.";
            }
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                message = "Nie znaleziono danych o samochodach (404).";
            }
            else
            {
                message = $"Błąd serwera: {ex.Message}";
            }
        }
        catch (Exception ex)
        {
            message = $"Nieoczekiwany błąd: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Reserve(Guid carId)
    {
        var start = DateTime.UtcNow;
        var end = start.AddDays(1);
        var dto = new
        {
            carId,
            startRental = start,
            endRental = end,
            methodOfPayment = "CreditCard"
        };

        try
        {
            var res = await Http.PostAsJsonAsync("reservations/create", dto);

            if (res.IsSuccessStatusCode)
            {
                var json = await res.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                var id = json?["rentalId"];
                await js.InvokeVoidAsync("alert", $"✅ Rezerwacja utworzona! Numer: {id}");
            }
            else
            {
                await js.InvokeVoidAsync("alert", $"❌ Nie udało się zarezerwować (błąd {res.StatusCode}).");
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"❌ Błąd połączenia z API: {ex.Message}");
        }
    }

    record Car(Guid CarId, string Brand, string Model, string CarType, decimal PricePerDay);
}
