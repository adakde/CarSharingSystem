@page "/cars"
@using CarSharingSystem.Client.Services
@inject HttpClient Http
@inject IJSRuntime js
@inject AuthService Auth
@inject NavigationManager Nav


<h3>🚘 Dostępne samochody</h3>

@if (cars == null)
{
    <p>Ładowanie...</p>
}
else if (cars.Any())
{
    @foreach (var c in cars)
    {
        <div class="border p-3 m-2 rounded shadow-sm">
            <b>@c.Brand @c.Model</b> – <span>@c.PricePerDay zł/dzień</span>

            <button class="btn btn-success btn-sm ms-3" @onclick="() => Reserve(c.CarId)">
                Rezerwuj
            </button>
            <button class="btn btn-outline-info btn-sm ms-1"
                    @onclick="@(() => GoToDetails(c.CarId))">
                🔍 Szczegóły
            </button>

        </div>
    }
}
else
{
    <p>Brak dostępnych samochodów.</p>
}


@code {
    private void GoToDetails(Guid id) => Nav.NavigateTo($"/car/{id}");
    private List<Car>? cars;

    protected override async Task OnInitializedAsync()
    {
        var token = await Auth.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }

        try
        {
            cars = await Http.GetFromJsonAsync<List<Car>>("cars/available");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Błąd przy pobieraniu samochodów: {ex.Message}");
            cars = new();
        }
    }

    private async Task Reserve(Guid carId)
    {
        var start = DateTime.UtcNow;
        var end = start.AddDays(1);
        var dto = new
        {
            carId,
            startRental = start,
            endRental = end,
            methodOfPayment = "CreditCard"
        };

        var res = await Http.PostAsJsonAsync("reservations/create", dto);
        if (res.IsSuccessStatusCode)
        {
            var json = await res.Content.ReadFromJsonAsync<Dictionary<string, object>>();
            var id = json["rentalId"];
            await js.InvokeVoidAsync("alert", $"✅ Rezerwacja utworzona! Numer: {id}");
        }
        else
        {
            await js.InvokeVoidAsync("alert", "❌ Nie udało się zarezerwować.");
        }
    }

    record Car(Guid CarId, string Brand, string Model, string CarType, decimal PricePerDay);
}