@page "/admin/cars"
@using CarSharingSystem.Client.Models
@using CarSharingSystem.Client.Services
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject IJSRuntime js
@inject AuthService Auth
@attribute [Authorize(Roles = "Admin")]

<h3>🚗 Panel administratora - zarządzanie samochodami</h3>

@if (!isAdmin)
{
    <div class="alert alert-danger mt-3">
        Brak uprawnień do wyświetlenia tej strony.
    </div>
}
else
{
    <EditForm Model="@newCar" OnValidSubmit="AddCar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3 mt-3">
            <input class="form-control mb-2" placeholder="Marka" @bind="newCar.Brand" />
            <input class="form-control mb-2" placeholder="Model" @bind="newCar.Model" />
            <input type="number" class="form-control mb-2" placeholder="Rok produkcji" @bind="newCar.YearOfProduction" />

            <select class="form-control mb-2" @bind="newCar.CarType">
                @foreach (var type in Enum.GetValues<CarType>())
                {
                    <option value="@type">@type</option>
                }
            </select>

            <input type="number" class="form-control mb-2" placeholder="Bateria (%)" @bind="newCar.Battery" />
            <input type="number" class="form-control mb-2" placeholder="Zasięg (km)" @bind="newCar.Range" />
            <input type="number" class="form-control mb-2" placeholder="Czas ładowania (h)" @bind="newCar.LoadingTime" />

            <select class="form-control mb-2" @bind="newCar.Status">
                @foreach (var status in Enum.GetValues<CarStatus>())
                {
                    <option value="@status">@status</option>
                }
            </select>

            <input type="number" class="form-control mb-2" placeholder="Cena (zł/dzień)" @bind="newCar.PricePerDay" />
            <input class="form-control mb-2" placeholder="Lokalizacja" @bind="newCar.Location" />

            <button class="btn btn-success">➕ Dodaj samochód</button>
        </div>
    </EditForm>

    <hr />

    @if (cars == null)
    {
        <p>Ładowanie...</p>
    }
    else if (!cars.Any())
    {
        <p>Brak samochodów w bazie.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Marka</th>
                    <th>Model</th>
                    <th>Typ</th>
                    <th>Cena (zł/dzień)</th>
                    <th>Status</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in cars)
                {
                    <tr>
                        <td>@c.Brand</td>
                        <td>@c.Model</td>
                        <td>@c.CarType</td>
                        <td>@c.PricePerDay</td>
                        <td>@c.Status</td>
                        <td>
                            <button class="btn btn-primary btn-sm me-1" @onclick="() => OpenEditModal(c)">Edytuj</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteCar(c.CarId)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (showEditModal && editCar != null)
        {
            <div class="modal show d-block" style="background: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">✏️ Edycja samochodu</h5>
                            <button class="btn-close" @onclick="CloseEditModal"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="editCar" OnValidSubmit="SaveEdit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6">
                                        <input class="form-control mb-2" @bind="editCar.Brand" placeholder="Marka" />
                                        <input class="form-control mb-2" @bind="editCar.Model" placeholder="Model" />
                                        <input type="number" class="form-control mb-2" @bind="editCar.YearOfProduction" placeholder="Rok produkcji" />
                                        <input type="number" class="form-control mb-2" @bind="editCar.PricePerDay" placeholder="Cena (zł/dzień)" />
                                        <input class="form-control mb-2" @bind="editCar.Location" placeholder="Lokalizacja" />
                                    </div>

                                    <div class="col-md-6">
                                        <input type="number" class="form-control mb-2" @bind="editCar.Battery" placeholder="Stan baterii (%)" />
                                        <input type="number" class="form-control mb-2" @bind="editCar.Range" placeholder="Zasięg (km)" />
                                        <input type="number" class="form-control mb-2" @bind="editCar.LoadingTime" placeholder="Czas ładowania (h)" />

                                        <select class="form-control mb-2" @bind="editCar.CarType">
                                            @foreach (var type in Enum.GetValues<CarType>())
                                            {
                                                <option value="@type">@type</option>
                                            }
                                        </select>

                                        <select class="form-control mb-2" @bind="editCar.Status">
                                            @foreach (var status in Enum.GetValues<CarStatus>())
                                            {
                                                <option value="@status">@status</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <button class="btn btn-success">💾 Zapisz zmiany</button>
                                <button type="button" class="btn btn-secondary ms-2" @onclick="CloseEditModal">Anuluj</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }

    }
}

@code {
    private List<Car>? cars;
    private CarCreate newCar = new();
    private bool isAdmin;
    private CarEdit? editCar;
    private bool showEditModal = false;

    protected override async Task OnInitializedAsync()
    {
        var token = await Auth.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
            return;

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        // 🔹 poprawne odczytanie roli z tokena
        var jwt = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler().ReadJwtToken(token);

        var role = jwt.Claims.FirstOrDefault(c =>
            c.Type == "role" ||
            c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
        )?.Value;

        Console.WriteLine($"[AdminCars] Token role: {role}");

        isAdmin = role?.Equals("Admin", StringComparison.OrdinalIgnoreCase) ?? false;

        if (isAdmin)
        {
            try
            {
                cars = await Http.GetFromJsonAsync<List<Car>>("cars/getall");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[AdminCars] Błąd przy ładowaniu aut: {ex.Message}");
            }
        }
    }

    private async Task AddCar()
    {
        var res = await Http.PostAsJsonAsync("cars/add", newCar);
        if (res.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("alert", "✅ Samochód dodany!");
            cars = await Http.GetFromJsonAsync<List<Car>>("cars/getall");
            newCar = new CarCreate(); // wyczyść formularz
        }
        else
        {
            var error = await res.Content.ReadAsStringAsync();
            await js.InvokeVoidAsync("alert", $"❌ Błąd podczas dodawania samochodu: {error}");
        }
    }

    private async Task DeleteCar(Guid id)
    {
        var res = await Http.DeleteAsync($"cars/{id}");
        if (res.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("alert", "🚗 Samochód usunięty!");
            cars = await Http.GetFromJsonAsync<List<Car>>("cars/getall");
        }
        else
        {
            await js.InvokeVoidAsync("alert", "❌ Nie udało się usunąć samochodu.");
        }
    }

    record Car(Guid CarId, string Brand, string Model, string CarType, decimal PricePerDay, string Status);

    private void OpenEditModal(Car car)
    {
        editCar = new CarEdit
        {
            CarId = car.CarId,
            Brand = car.Brand,
            Model = car.Model,
            YearOfProduction = DateTime.Now.Year,
            CarType = Enum.TryParse<CarType>(car.CarType, out var type) ? type : CarType.Sedan,
            PricePerDay = car.PricePerDay,
            Status = Enum.TryParse<CarStatus>(car.Status, out var stat) ? stat : CarStatus.Available,
            Battery = 100,
            Range = 500,
            LoadingTime = 3,
            Location = "Warszawa"
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editCar = null;
    }

    private async Task SaveEdit()
    {
        if (editCar == null) return;

        var res = await Http.PutAsJsonAsync($"cars/update/{editCar.CarId}", editCar);
        if (res.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("alert", "✅ Zaktualizowano samochód!");
            cars = await Http.GetFromJsonAsync<List<Car>>("cars/getall");
            CloseEditModal();
        }
        else
        {
            var err = await res.Content.ReadAsStringAsync();
            await js.InvokeVoidAsync("alert", $"❌ Błąd przy zapisie: {err}");
        }
    }

    class CarEdit
    {
        public Guid CarId { get; set; }
        public string Brand { get; set; } = string.Empty;
        public string Model { get; set; } = string.Empty;
        public int YearOfProduction { get; set; }
        public CarType CarType { get; set; }
        public double? Battery { get; set; }
        public int? Range { get; set; }
        public double? LoadingTime { get; set; }
        public CarStatus Status { get; set; } = CarStatus.Available;
        public decimal PricePerDay { get; set; }
        public string Location { get; set; } = string.Empty;
    }
}
